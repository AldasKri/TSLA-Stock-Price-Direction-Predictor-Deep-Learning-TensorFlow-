# -*- coding: utf-8 -*-
"""Tesla_Stock_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MvzHUiO2a6vnguph1s6NGNhHG7gLSr5G
"""

import pandas as pd
stock = pd.read_csv("TSLA.csv")
stock.describe()

#There is no data processing (outside of scaling) that is necessary since there are no missing values

stock.head()

stock = pd.DataFrame(stock)
stock['Movement'] = stock['Close'].diff().apply(lambda x: 'up' if x>0 else ('down' if x<0 else None))
stock['Movement'] = stock['Movement'].map({'down':0, 'up':1})
stock = stock.dropna()
stock.head()

X = stock.drop(columns = ['Date', 'Movement'])
y = stock['Movement']

from sklearn.model_selection import train_test_split
train_X, val_X, train_y, val_y  = train_test_split(X,y,random_state = 1, shuffle = False, test_size = 0.2)

#You should always scale after the split (otherwise there will be daat leakage)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
train_X = scaler.fit_transform(train_X)
val_X = scaler.transform(val_X)

from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.callbacks import EarlyStopping

model = keras.Sequential([
    layers.Dense(units = 64, activation = 'relu', input_shape = [6]),
    layers.Dropout(0.2),
    layers.Dense(units = 64, activation = 'relu'),
    layers.Dropout(0.2),
    layers.Dense(units = 1, activation = 'sigmoid')
])

model.compile(
    optimizer = 'adam',
    loss = 'binary_crossentropy',
    metrics = ['binary_accuracy']
)

early_stopping = EarlyStopping(
    min_delta = 0.001,
    patience = 20,
    restore_best_weights = True
)

history = model.fit(
    train_X, train_y,
    validation_data = (val_X, val_y),
    batch_size = 64,
    epochs = 1000,
    callbacks = [early_stopping],
    verbose = 0
)

import matplotlib.pyplot as plt
history_df = pd.DataFrame(history.history)
history_df.loc[5:, ['loss', 'val_loss']].plot()
history_df.loc[5:, ['binary_accuracy', 'val_binary_accuracy']].plot()


print('Best Validation Loss {:0.4f}\nBest Validation Accuracy {:0.4f}'\
      .format(history_df['val_loss'].min(),
              history_df['val_binary_accuracy'].max()))

#This is to test if the 81% accuracy is real by making a confusion matrix

from sklearn.metrics import confusion_matrix, classification_report
pred_y = (model.predict(val_X)>0.5).astype(int)
print(confusion_matrix(val_y, pred_y))
print("[TN FP]")
print("[FN TP]")
print(classification_report(val_y, pred_y))